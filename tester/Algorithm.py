import os
import pandas as pd
import numpy as np
import time
import sys
import csv
import pickle as pkl
import json

from briar_analysis.VerificationResults import VerificationResults, plotVerificationMetrics, plotVerificationMetricsFaceRestricted
from briar_analysis.SearchResults import SearchResults, plotOpenSearchMetrics, plotClosedSearchMetrics
from briar_analysis.CovariateTools import populateMoreFields, multiHistogram, convertXmlToDF
import briar_analysis as ba


def fileLoad(f):

    if not os.path.exists(f) and f.endswith('.pkl'):
        f += ".npy"
    output = None
    try:
        output = pkl.load(open(f,'rb'))
    except Exception as e:
        output = None
    if output is None:
        output = np.load(f,allow_pickle=True)
    
    assert output is not None
    return output


class Algorithm:
    
    
    def __init__(self, tag, source_dir, color=None):
        self.tag = tag
        self.source_dir = source_dir
        self.test_date = time.asctime()
        self.color = color
        if color:
            self.face_color = color
            self.body_color = color
            self.gait_color = color
            self.fuse_color = color
        else:
            self.face_color = 'blue'
            self.body_color = 'red'
            self.gait_color = 'orange'
            self.fuse_color = 'green'
        self.label = ''
        self.name = ''
        self.version = ''
        self.api_version = ''
        self.developer = ''
        
        self.container_file = ''
        self.container_hash = '' 
    
        # service_info.json should be generated by the API and should be in ALG_DIR. 
        
        if os.path.exists(os.path.join(self.source_dir,'service_info.json')):
            f = open(os.path.join(self.source_dir,'service_info.json'),'rb')
            jsdata = json.load(f)
            
            self.name = jsdata['service_name']
            self.version = '{}.{}.{}'.format(jsdata['version_major'],jsdata['version_minor'],jsdata['version_patch'],)
            self.label = "%s %s %s"%(jsdata['dev_short'],self.name,self.version)
            self.api_version = '{}.{}.{}'.format(jsdata['api_version_major'],jsdata['api_version_minor'],jsdata['api_version_patch'],)
            self.developer = jsdata['developer']
        
        self.face_verification_all = None
        self.body_verification_all = None
        self.gait_verification_all = None
        self.fuse_verification_all = None
        
        self.ver_face_incl_ctrl = None
        self.ver_face_incl_trt = None
        self.ver_face_restr_ctrl = None
        self.ver_face_restr_trt = None
        
        self.ver_gait_incl_ctrl = None
        self.ver_gait_incl_trt = None
        self.ver_gait_restr_ctrl = None
        self.ver_gait_restr_trt = None
        
        self.ver_body_incl_ctrl = None
        self.ver_body_incl_trt = None
        self.ver_body_restr_ctrl = None
        self.ver_body_restr_trt = None
        
        self.ver_fuse_incl_ctrl = None
        self.ver_fuse_incl_trt = None
        self.ver_fuse_restr_ctrl = None
        self.ver_fuse_restr_trt = None
        
        self.ver_face_mis_close_face = None
        self.ver_fuse_mis_close_face = None

        self.ver_face_mis_lr_face = None
        self.ver_fuse_mis_lr_face = None

        self.ver_body_mis_lr_body = None
        self.ver_fuse_mis_lr_body = None

        self.ver_gait_mis_lr_gait = None
        self.ver_fuse_mis_lr_gait = None

        self.ver_face_mis_uav = None
        self.ver_fuse_mis_uav = None

        self.ver_face_mis_lr_turb = None
        self.ver_body_mis_lr_turb = None
        self.ver_gait_mis_lr_turb = None
        self.ver_fuse_mis_lr_turb = None

        self.ver_face_mis_ctrl = None
        self.ver_body_mis_ctrl = None
        self.ver_gait_mis_ctrl = None
        self.ver_fuse_mis_ctrl = None

        self.ver_face_mis_elev = None
        self.ver_fuse_mis_elev = None
        
        self.search_face_incl_ctrl = None
        self.search_body_incl_ctrl = None
        self.search_gait_incl_ctrl = None
        self.search_fuse_incl_ctrl = None
        self.search_face_incl_trt = None
        self.search_body_incl_trt = None
        self.search_gait_incl_trt = None
        self.search_fuse_incl_trt = None

        self.search_face_restr_ctrl = None
        self.search_body_restr_ctrl = None
        self.search_gait_restr_ctrl = None
        self.search_fuse_restr_ctrl = None

        self.search_face_restr_trt = None
        self.search_body_restr_trt = None
        self.search_gait_restr_trt = None
        self.search_fuse_restr_trt = None
        
        self.metric_face_incl_ctrl = None
        self.metric_fuse_incl_ctrl = None
        self.metric_face_incl_trt = None
        self.metric_fuse_incl_trt = None
        
        self.metric_face_restr_ctrl = None
        self.metric_fuse_restr_ctrl = None
        self.metric_face_restr_trt = None
        self.metric_fuse_restr_trt = None
        
        self.metric_cmc_search_face_incl_ctrl = None
        self.metric_cmc_search_fuse_incl_ctrl = None
        self.metric_cmc_search_face_incl_trt = None
        self.metric_cmc_search_fuse_incl_trt = None

        self.metric_cmc_search_face_rstr_ctrl = None
        self.metric_cmc_search_fuse_rstr_ctrl = None
        self.metric_cmc_search_face_rstr_trt = None
        self.metric_cmc_search_fuse_rstr_trt = None
    
        self.metric_opensearch_face_incl_ctrl = None
        self.metric_opensearch_fuse_incl_ctrl = None
        self.metric_opensearch_face_incl_trt = None
        self.metric_opensearch_fuse_incl_trt = None

        self.metric_opensearch_face_rstr_ctrl = None
        self.metric_opensearch_fuse_rstr_ctrl = None
        self.metric_opensearch_face_rstr_trt = None
        self.metric_opensearch_fuse_rstr_trt = None
        

    def get_alg_info(self):
        '''
        return algorithm info for tables in report cards
        '''
        return [self.tag, self.developer, self.name, self.version]
        

    def populate_results(self, probes, g1_file, g2_file, debug=False, use_verif=False):
        '''
        populate the VerificationResults and SearchResults instances for the probe partitions
        '''
        NAN = float('nan')
        gallery1 = pd.read_csv(os.path.join(self.source_dir, g1_file))
        gallery2 = pd.read_csv(os.path.join(self.source_dir, g2_file))
        gallery = pd.concat([gallery1,gallery2])

        face_scores1_file = os.path.join(self.source_dir,'face_scores_g1.pkl')
        face_scores2_file = os.path.join(self.source_dir,'face_scores_g2.pkl')
        body_scores1_file = os.path.join(self.source_dir,'body_scores_g1.pkl')
        body_scores2_file = os.path.join(self.source_dir,'body_scores_g2.pkl')
        gait_scores1_file = os.path.join(self.source_dir,'gait_scores_g1.pkl')
        gait_scores2_file = os.path.join(self.source_dir,'gait_scores_g2.pkl')
        fuse_scores1_file = os.path.join(self.source_dir,'fuse_scores_g1.pkl')
        fuse_scores2_file = os.path.join(self.source_dir,'fuse_scores_g2.pkl')

        try:
            face_scores1 = fileLoad(face_scores1_file)
            face_scores2 = fileLoad(face_scores2_file)
            face_scores = np.concatenate([face_scores1,face_scores2],axis=1)
        except:
            # if score files can't be loaded for a particular modality, scores will be filled with NaNs to prevent the notebooks from crashing
            if debug:
                print('fallback face')
            face_scores = np.zeros((len(probes),len(gallery)),dtype=np.float64)
            face_scores[:,:] = NAN
            face_scores1 = np.zeros((len(probes),len(gallery1)),dtype=np.float64)
            face_scores2 = np.zeros((len(probes),len(gallery2)),dtype=np.float64)
            face_scores1[:,:] = NAN
            face_scores2[:,:] = NAN
        try:
            body_scores1 = fileLoad(body_scores1_file)
            body_scores2 = fileLoad(body_scores2_file)
            body_scores = np.concatenate([body_scores1,body_scores2],axis=1)
        except:
            if debug:
                print('fallback body')
            body_scores = np.zeros((len(probes),len(gallery)),dtype=np.float64)
            body_scores[:,:] = NAN
            body_scores1 = np.zeros((len(probes),len(gallery1)),dtype=np.float64)
            body_scores2 = np.zeros((len(probes),len(gallery2)),dtype=np.float64)
            body_scores1[:,:] = NAN
            body_scores2[:,:] = NAN
        try:
            gait_scores1 = fileLoad(gait_scores1_file)
            gait_scores2 = fileLoad(gait_scores2_file)
            gait_scores = np.concatenate([gait_scores1,gait_scores2],axis=1)
        except:
            if debug:
                print('fallback gait')
            gait_scores = np.zeros((len(probes),len(gallery)),dtype=np.float64)
            gait_scores[:,:] = NAN
            gait_scores1 = np.zeros((len(probes),len(gallery1)),dtype=np.float64)
            gait_scores2 = np.zeros((len(probes),len(gallery2)),dtype=np.float64)
            gait_scores1[:,:] = NAN
            gait_scores2[:,:] = NAN
        try:
            fuse_scores1 = fileLoad(fuse_scores1_file)
            fuse_scores2 = fileLoad(fuse_scores2_file)
            fuse_scores = np.concatenate([fuse_scores1,fuse_scores2],axis=1)
        except:
            if debug:
                print('fallback fuse')
            fuse_scores = np.zeros((len(probes),len(gallery)),dtype=np.float64)
            fuse_scores[:,:] = NAN
            fuse_scores1 = np.zeros((len(probes),len(gallery1)),dtype=np.float64)
            fuse_scores2 = np.zeros((len(probes),len(gallery2)),dtype=np.float64)
            fuse_scores1[:,:] = NAN
            fuse_scores2[:,:] = NAN


        # Check to make sure scores are loaded as expected.
        if debug:
            print('face scores:', face_scores.shape)
            print('body scores:', body_scores.shape)
            print('gait scores:', gait_scores.shape)
            print('fuse scores:', fuse_scores.shape)
        assert face_scores.shape == body_scores.shape
        assert face_scores.shape == gait_scores.shape
        assert face_scores.shape == fuse_scores.shape

        # populate 'all' verification results for each modality
        self.body_verification_all = VerificationResults(body_scores,probes,
                                                        gallery,algorithm=self.tag+"-Body",label=self.tag+"-Body",color=self.body_color)
        self.face_verification_all = VerificationResults(face_scores,probes,
                                                        gallery,algorithm=self.tag+"-Face",label=self.tag+"-Face",color=self.face_color)
        self.gait_verification_all = VerificationResults(gait_scores,probes,
                                                        gallery,algorithm=self.tag+"-Gait",label=self.tag+"-Gait",color=self.gait_color)
        self.fuse_verification_all = VerificationResults(fuse_scores,probes,
                                                        gallery,algorithm=self.tag+"-Fuse",label=self.tag+"-Fuse",color=self.fuse_color)
        
        # filter verification results by face included/restricted and control/treatment
        select = probes.face_incl_ctrl
        self.ver_face_incl_ctrl = self.face_verification_all.filterProbes(select,
                                                                        label=self.tag+' Face Control',linestyle='dotted',linewidth=1.25)
        self.ver_body_incl_ctrl = self.body_verification_all.filterProbes(select,
                                                                        label=self.tag+' Body Control',linestyle='dotted',linewidth=1.25)
        self.ver_gait_incl_ctrl = self.gait_verification_all.filterProbes(select,
                                                                        label=self.tag+' Gait Control',linestyle='dotted',linewidth=1.25)
        self.ver_fuse_incl_ctrl = self.fuse_verification_all.filterProbes(select,
                                                                        label=self.tag+' Fuse Control',linestyle='dotted',linewidth=1.25)

        select = probes.face_incl_trt
        self.ver_face_incl_trt = self.face_verification_all.filterProbes(select,label=self.tag+' Face Treatment')
        self.ver_body_incl_trt = self.body_verification_all.filterProbes(select,label=self.tag+' Body Treatment')
        self.ver_gait_incl_trt = self.gait_verification_all.filterProbes(select,label=self.tag+' Gait Treatment')
        self.ver_fuse_incl_trt = self.fuse_verification_all.filterProbes(select,label=self.tag+' Fuse Treatment')

        select = probes.face_restr_ctrl
        self.ver_face_restr_ctrl = self.face_verification_all.filterProbes(select,
                                                                        label=self.tag+' Face Control',linestyle='dotted',linewidth=1.25)
        self.ver_body_restr_ctrl = self.body_verification_all.filterProbes(select,
                                                                        label=self.tag+' Body Control',linestyle='dotted',linewidth=1.25)
        self.ver_gait_restr_ctrl = self.gait_verification_all.filterProbes(select,
                                                                        label=self.tag+' Gait Control',linestyle='dotted',linewidth=1.25)
        self.ver_fuse_restr_ctrl = self.fuse_verification_all.filterProbes(select,
                                                                        label=self.tag+' Fuse Control',linestyle='dotted',linewidth=1.25)

        select = probes.face_restr_trt
        self.ver_face_restr_trt = self.face_verification_all.filterProbes(select,label=self.tag+' Face Treatment')
        self.ver_body_restr_trt = self.body_verification_all.filterProbes(select,label=self.tag+' Body Treatment')
        self.ver_gait_restr_trt = self.gait_verification_all.filterProbes(select,label=self.tag+' Gait Treatment')
        self.ver_fuse_restr_trt = self.fuse_verification_all.filterProbes(select,label=self.tag+' Fuse Treatment')

        # Filter verification results by mission area.
        # Not all modalities are needed for each mission area.
        select = probes.mission_close_face
        self.ver_face_mis_close_face = self.face_verification_all.filterProbes(select)
        self.ver_fuse_mis_close_face = self.fuse_verification_all.filterProbes(select)

        select = probes.mission_lr_face
        self.ver_face_mis_lr_face = self.face_verification_all.filterProbes(select)
        self.ver_fuse_mis_lr_face = self.fuse_verification_all.filterProbes(select)

        select = probes.mission_lr_body
        self.ver_body_mis_lr_body = self.body_verification_all.filterProbes(select)
        self.ver_fuse_mis_lr_body = self.fuse_verification_all.filterProbes(select)

        select = probes.mission_gait
        self.ver_gait_mis_lr_gait = self.gait_verification_all.filterProbes(select)
        self.ver_fuse_mis_lr_gait = self.fuse_verification_all.filterProbes(select)

        select = probes.mission_uav
        self.ver_face_mis_uav = self.face_verification_all.filterProbes(select)
        self.ver_fuse_mis_uav = self.fuse_verification_all.filterProbes(select)

        select = probes.mission_lr_turb
        self.ver_face_mis_lr_turb = self.face_verification_all.filterProbes(select)
        self.ver_body_mis_lr_turb = self.body_verification_all.filterProbes(select)
        self.ver_gait_mis_lr_turb = self.gait_verification_all.filterProbes(select)
        self.ver_fuse_mis_lr_turb = self.fuse_verification_all.filterProbes(select)

        select = probes.mission_ctrl
        self.ver_face_mis_ctrl = self.face_verification_all.filterProbes(select,linestyle='dotted',linewidth=0.75,label=self.tag+" Face Control")
        self.ver_body_mis_ctrl = self.body_verification_all.filterProbes(select,linestyle='dotted',linewidth=0.75,label=self.tag+" Body Control")
        self.ver_gait_mis_ctrl = self.gait_verification_all.filterProbes(select,linestyle='dotted',linewidth=0.75,label=self.tag+" Gait Control")
        self.ver_fuse_mis_ctrl = self.fuse_verification_all.filterProbes(select,linestyle='dotted',linewidth=0.75,label=self.tag+" Fuse Control")

        select = probes.mission_elevated
        self.ver_face_mis_elev = self.face_verification_all.filterProbes(select)
        self.ver_fuse_mis_elev = self.fuse_verification_all.filterProbes(select)
        
        # Search results files must have these names exactly and be in ALG_DIR
        face_search1_file = os.path.join(self.source_dir,'face_search_g1.pkl')
        face_search2_file = os.path.join(self.source_dir,'face_search_g2.pkl')
        body_search1_file = os.path.join(self.source_dir,'body_search_g1.pkl')
        body_search2_file = os.path.join(self.source_dir,'body_search_g2.pkl')
        gait_search1_file = os.path.join(self.source_dir,'gait_search_g1.pkl')
        gait_search2_file = os.path.join(self.source_dir,'gait_search_g2.pkl')
        fuse_search1_file = os.path.join(self.source_dir,'fuse_search_g1.pkl')
        fuse_search2_file = os.path.join(self.source_dir,'fuse_search_g2.pkl')
        

        if not use_verif: 
            # Should be the case unless there is something wrong with the search results that causes silent failure
            try:
                body1_data = fileLoad(body_search1_file)
                body2_data = fileLoad(body_search2_file)
                body1_search = SearchResults(body1_data,probes,gallery1,algorithm=self.tag+"-Body",label=self.tag+"-Body",color=self.body_color)
                body2_search = SearchResults(body2_data,probes,gallery2,algorithm=self.tag+"-Body",label=self.tag+"-Body",color=self.body_color)
            except:
                if debug:
                    print("couldn't load body search file. generating body search results from verification results.")
                body1_search = VerificationResults(body_scores1,probes,
                                            gallery1,algorithm=self.tag+"-Body1",label=self.tag+"-Body1",color=self.body_color).toSearchResults()
                body2_search = VerificationResults(body_scores2,probes,
                                            gallery2,algorithm=self.tag+"-Body2",label=self.tag+"-Body2",color=self.body_color).toSearchResults()
        else:
            # If search results exist and are the right shape but are not correct, set USE_VERIF = True in notebook
            # Populate search results from verification results 
            body1_search = VerificationResults(body_scores1,probes,
                                            gallery1,algorithm=self.tag+"-Body1",label=self.tag+"-Body1",color=self.body_color).toSearchResults()
            body2_search = VerificationResults(body_scores2,probes,
                                            gallery2,algorithm=self.tag+"-Body2",label=self.tag+"-Body2",color=self.body_color).toSearchResults()
        if not use_verif:
            try:
                face1_data = fileLoad(face_search1_file)
                face2_data = fileLoad(face_search2_file)
                face1_search = SearchResults(face1_data,probes,gallery1,algorithm=self.tag+"-Face",label=self.tag+"-Face",color=self.face_color)
                face2_search = SearchResults(face2_data,probes,gallery2,algorithm=self.tag+"-Face",label=self.tag+"-Face",color=self.face_color)
            except:   
                if debug:
                    print("couldn't load face search file. generating body search results from verification results.")
                face1_search = VerificationResults(face_scores1,probes,
                                                gallery1,algorithm=self.tag+"-Face1",label=self.tag+"-Face1",color=self.face_color).toSearchResults()
                face2_search = VerificationResults(face_scores2,probes,
                                                gallery2,algorithm=self.tag+"-Face2",label=self.tag+"-Face2",color=self.face_color).toSearchResults()
        else:
            face1_search = VerificationResults(face_scores1,probes,
                                                gallery1,algorithm=self.tag+"-Face1",label=self.tag+"-Face1",color=self.face_color).toSearchResults()
            face2_search = VerificationResults(face_scores2,probes,
                                                gallery2,algorithm=self.tag+"-Face2",label=self.tag+"-Face2",color=self.face_color).toSearchResults()
        if not use_verif:
            try:
                gait1_data = fileLoad(gait_search1_file)
                gait2_data = fileLoad(gait_search2_file)
                gait1_search = SearchResults(gait1_data,probes,gallery1,algorithm=self.tag+"-Gait",label=self.tag+"-Gait",color=self.gait_color)
                gait2_search = SearchResults(gait2_data,probes,gallery2,algorithm=self.tag+"-Gait",label=self.tag+"-Gait",color=self.gait_color)
            except:
                if debug:
                    print("couldn't load gait search file. generating gait search results from verification results.")
                gait1_search = VerificationResults(gait_scores1,probes,
                                                gallery1,algorithm=self.tag+"-Gait1",label=self.tag+"-Gait1",color=self.gait_color).toSearchResults()
                gait2_search = VerificationResults(gait_scores2,probes,
                                                gallery2,algorithm=self.tag+"-Gait2",label=self.tag+"-Gait2",color=self.gait_color).toSearchResults()
        else:
            gait1_search = VerificationResults(gait_scores1,probes,
                                                gallery1,algorithm=self.tag+"-Gait1",label=self.tag+"-Gait1",color=self.gait_color).toSearchResults()
            gait2_search = VerificationResults(gait_scores2,probes,
                                                gallery2,algorithm=self.tag+"-Gait2",label=self.tag+"-Gait2",color=self.gait_color).toSearchResults()
        if not use_verif:
            try:
                fuse1_data = fileLoad(fuse_search1_file)
                fuse2_data = fileLoad(fuse_search2_file)
                fuse1_search = SearchResults(fuse1_data,probes,gallery1,algorithm=self.tag+"-Fuse",label=self.tag+"-Fuse",color=self.fuse_color)
                fuse2_search = SearchResults(fuse2_data,probes,gallery2,algorithm=self.tag+"-Fuse",label=self.tag+"-Fuse",color=self.fuse_color)
            except:
                if debug:
                    print("couldn't load fuse search file. generating fuse search results from verification results.")
                fuse1_search = VerificationResults(fuse_scores1,probes,
                                                gallery1,algorithm=self.tag+"-Fuse1",label=self.tag+"-Fuse1",color=self.fuse_color).toSearchResults()
                fuse2_search = VerificationResults(fuse_scores2,probes,
                                                gallery2,algorithm=self.tag+"-Fuse2",label=self.tag+"-Fuse2",color=self.fuse_color).toSearchResults()
        else:
            fuse1_search = VerificationResults(fuse_scores1,probes,
                                                gallery1,algorithm=self.tag+"-Fuse1",label=self.tag+"-Fuse1",color=self.fuse_color).toSearchResults()
            fuse2_search = VerificationResults(fuse_scores2,probes,
                                                gallery2,algorithm=self.tag+"-Fuse2",label=self.tag+"-Fuse2",color=self.fuse_color).toSearchResults()
            
        # Merge g1 and g2 search results for each modality
        face_search = face1_search.merge(face2_search)
        body_search = body1_search.merge(body2_search)
        gait_search = gait1_search.merge(gait2_search)
        fuse_search = fuse1_search.merge(fuse2_search)
        
        # Partition the search results 
        select = face_search.probe_df.face_incl_ctrl
        self.search_face_incl_ctrl = face_search.filterProbes(select,
                                                        label=self.tag+' Face Control',linestyle='dotted',linewidth=1.25)
        self.search_body_incl_ctrl = body_search.filterProbes(select,
                                                        label=self.tag+' Body Control',linestyle='dotted',linewidth=1.25)
        self.search_gait_incl_ctrl = gait_search.filterProbes(select,
                                                        label=self.tag+ 'Gait Control',linestyle='dotted',linewidth=1.25)
        self.search_fuse_incl_ctrl = fuse_search.filterProbes(select,
                                                        label=self.tag+' Fuse Control',linestyle='dotted',linewidth=1.25)

        select = face_search.probe_df.face_incl_trt
        self.search_face_incl_trt = face_search.filterProbes(select,label=self.tag+' Face Treatment')
        self.search_body_incl_trt = body_search.filterProbes(select,label=self.tag+' Body Treatment')
        self.search_gait_incl_trt = gait_search.filterProbes(select,label=self.tag+' Gait Treatment')
        self.search_fuse_incl_trt = fuse_search.filterProbes(select,label=self.tag+' Fuse Treatment')

        select = face_search.probe_df.face_restr_ctrl
        self.search_face_restr_ctrl = face_search.filterProbes(select,label=self.tag+' Face Control',linestyle='dotted',linewidth=1.25)
        self.search_body_restr_ctrl = body_search.filterProbes(select,label=self.tag+' Body Control',linestyle='dotted',linewidth=1.25)
        self.search_gait_restr_ctrl = gait_search.filterProbes(select,label=self.tag+' Gait Control',linestyle='dotted',linewidth=1.25)
        self.search_fuse_restr_ctrl = fuse_search.filterProbes(select,label=self.tag+' Fuse Control',linestyle='dotted',linewidth=1.25)

        select = face_search.probe_df.face_restr_trt
        self.search_face_restr_trt = face_search.filterProbes(select,label=self.tag+' Face Treatment')
        self.search_body_restr_trt = body_search.filterProbes(select,label=self.tag+' Body Treatment')
        self.search_gait_restr_trt = gait_search.filterProbes(select,label=self.tag+' Gait Treatment')
        self.search_fuse_restr_trt = fuse_search.filterProbes(select,label=self.tag+' Fuse Treatment')
